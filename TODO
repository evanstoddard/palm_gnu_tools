* fix the `-l' gas flag.  (flag_short_refs in md_estimate_size_before_relax()
in binutils/gas/config/tc-m68k.c)  This would let a few patches in gcc's
m68k.md and lb1sf68palmos.asm go away; in particular, getting rid of the
`define_insn "jump"' one would reduce code size, maybe even non-trivially.

* get rid of pilot.ld / palmos_link.ld in favour of a customized set of
scripts in binutils/ld/scripttempl/m68kcoff.sc.  Besides being a bit of a
tidy-up, this would get -r linking going -- not that that's particularly
useful.  (Might need to hack a little just above the base_file stuff in
binutils/bfd/cofflink.c too.)
* in conjunction with that, reduce the main code section size to 32K, with
some (separate) way to ask for a 64K one (and similarly for extra code
sections -- probably a new option or .def file thing for multigen).
* maybe try to make the binutils palmos stuff a proper subtarget -- separate
off the machine independent patches to send off to the main binutils
distribution.

* Overhaul the way we accomodate the "%a5 is the *end* of the globals"
problem in binutils.  Currently we have a weird reloc END16(<foo>,<offset>)
that means "+ <foo> + <offset> - edata", weird code in bfd to evaluate edata
(which is hardcoded) at the right time, and weird code in gas to generate
the reloc.  A possibly feasible alternative is to emit *two* relocs,
(<foo>,<offset>) and (negedata,0).  The upgrade path is
  * Leave the reloc and bfd code for compatibility with old link libraries
  * Remove the @END stuff in gas since we no longer need to generate it
  * Have GCC emit "<foo>+negedata(%a5)" instead of "<foo>@END(%a5)"
  * Have gas split these fixups into two relocs.  It looks like this is
  flaky in the COFF assembler, but very practical in the ELF assembler.
There is more research to do here.
* An alternative is to do a trial link to find out how big the global data
memory region is, and then do the real link with datares ORIGIN = -size.
This would Just Work, but is less flexible (you can't mix %a4 and %a5
addressing in the same executable), and I *really* want to avoid doing a
trial link if possible.

* Update the ChangeLogs, and start submitting patches to the various GNU
maintainers (without any of the remaining nasty hacks!).

* Consider how to use --emit-relocs instead of --embedded-relocs in ld and
  return to reading real relocs in binres.cpp instead of .reloc sections.

* Perhaps configure GCC with TARGET_MEM_FUNCTIONS so that aggregate
  initialisation is done with memcpy instead of bcopy -- and provide
  memcpy/bcopy more reliably than before.  Or even hack something up so
  that it can use MemMove.

* Future palmdev-prep facilities:
  - Handle multi-libs correctly, instead of just recursively listing
    everything under "lib" directories
  - Add "base" file handling, to facilitate use of SDK updates
  - write_specs with target="none" should mean don't write any link_* specs

* Use @command for commands, @option for options throughout prc-tools.texi.

* Use .PHONY properly in all our makefiles.

* If C++ is not in --enable-languages, we shouldn't try to build C++ target
  support (e.g. new12.cc).  Currently the build fails.

* Find a less hackish way to suppress [un]protoize and gcov.

* The headers installed by our prc-tools/include subdirectory need
  to be accessible from all targets; they should go somewhere like
  $datadir/prc-tools/include/after instead of $prefix/$target/include.

* Invent syntax in .def files for standalone code segments; probably should
  insert a jump to their entry points in the resulting code resources.

* Add a post-install script to the Cygwin build to do install-info.
