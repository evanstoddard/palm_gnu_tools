# Makefile for prc-tools libc.
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# This Makefile is currently something of a hack job.  There's piles of
# commented out stuff at the bottom there, and the corresponding source
# files aren't used yet, and are down in the exp(erimental) directory.
# There's a way to go before this libc provides anything like ISO C
# functionality.

srcdir = @srcdir@
VPATH = @srcdir@
#stop

prefix = @prefix@
exec_prefix = @exec_prefix@
target_alias = @target_alias@

INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@

SDKFLAGS =
MULTIFLAGS =

CC = $(target_alias)-gcc
AR = $(target_alias)-ar
RANLIB = $(target_alias)-ranlib

# PRINT_FLOATS huh?
CFLAGS = -Wall -O2 -fno-builtin -DPRINT_FLOATS \
  -I$(srcdir)/include -I$(srcdir)/../include $(SDKFLAGS) $(MULTIFLAGS)

INSTALL_DIR = $(exec_prefix)/$(target_alias)

XOBJS = conio.o vsprintf.o printf.o ctype.o setjmp.o \
     bcopy.o memmove.o strchr.o strncat.o strspn.o \
     memscan.o strcmp.o strncmp.o strstr.o \
     memset.o strcpy.o strncpy.o strtok.o \
     memcmp.o strnlen.o strtol.o \
     memcpy.o strcat.o strlen.o strpbrk.o strtoul.o

SOME_XOBJS = conio.o vsprintf.o printf.o ctype.o setjmp.o \
     bcopy.o memmove.o strchr.o strncat.o strspn.o \
     memscan.o strcmp.o strncmp.o strstr.o \
     memset.o strcpy.o strncpy.o strtok.o \
     malloc.o free.o realloc.o calloc.o \
     memcmp.o strnlen.o strtol.o \
     memcpy.o strcat.o strlen.o strpbrk.o strtoul.o \
     abort.o atexit.o bzero.o

STDLIB_OBJS = \
  div.o ldiv.o \
  malloc.o free.o calloc.o realloc.o \
  rand.o srand.o \
  strtol.o strtoul.o atoil.o \
  bmemcmp.o memcpy.o bcopy.o memset.o bzero.o


#OBJS = $(STDLIB_OBJS)
OBJS = $(SOME_XOBJS)

GOBJS =

INCDIR = $(srcdir)/include
INSTALL_HFILES = $(INCDIR)/ctype.h $(INCDIR)/errno.h $(INCDIR)/malloc.h \
		 $(INCDIR)/setjmp.h $(INCDIR)/stdio.h $(INCDIR)/string.h \
		 $(INCDIR)/stdlib.h $(INCDIR)/sys/types.h

INSTALL_FILES = libc.a mown-gp/libc.a libg.a mown-gp/libg.a libstdc++.a

all: $(INSTALL_FILES)

install: $(INSTALL_FILES) $(INSTALL_HFILES)
	$(INSTALL) -d $(exec_prefix)/$(target_alias)/include
	$(INSTALL) -d $(exec_prefix)/$(target_alias)/include/sys
	for f in $(INSTALL_HFILES); do \
	  echo $${f}; \
	  $(INSTALL_DATA) $${f} `echo $${f} | sed -e 's:^$(INCDIR):$(exec_prefix)/$(target_alias)/include:'`; \
	done
	$(INSTALL) -d $(exec_prefix)/$(target_alias)/lib
	$(INSTALL) -d $(exec_prefix)/$(target_alias)/lib/mown-gp
	for f in $(INSTALL_FILES); do \
	  echo $${f}; \
	  $(INSTALL_DATA) $${f} $(exec_prefix)/$(target_alias)/lib/$${f}; \
	done

#all: libc.a libc.sa libg.a libg.sa

old-install: libc.a libc.sa libg.a libg.sa
	cp -f libc.a $(PREFIX)/m68k-palmos-coff/lib
	chmod 644 $(PREFIX)/m68k-palmos-coff/lib/libc.a
	cp -f libg.a $(PREFIX)/m68k-palmos-coff/lib
	chmod 644 $(PREFIX)/m68k-palmos-coff/lib/libg.a
	cp -f libc.sa $(PREFIX)/m68k-palmos-coff/lib/libc.sa
	chmod 644 $(PREFIX)/m68k-palmos-coff/lib/libc.sa
	cp -f libg.sa $(PREFIX)/m68k-palmos-coff/lib/libg.sa
	chmod 644 $(PREFIX)/m68k-palmos-coff/lib/libg.sa
	cp -r include/* $(PREFIX)/m68k-palmos-coff/include
	-mkdir -p $(PREFIX)/lib
	cp -f Libc.prc $(PREFIX)/lib/Libc.prc
	chmod 644 $(PREFIX)/lib/Libc.prc

.c.s:
	$(CC) $(CFLAGS) -S $<

all-multilibs: libc.a libg.a

libc.a: $(OBJS)
	rm -f libc.a
	$(AR) cur libc.a $(OBJS)
	$(RANLIB) libc.a

mown-gp/libc.a: sub-multilibs

mown-gp/Makefile: Makefile
	if [ ! -d mown-gp ]; then mkdir mown-gp; fi
	sed '1,/^#stop/s,= \.,= ../.,' Makefile > mown-gp/Makefile

sub-multilibs: mown-gp/Makefile
	cd mown-gp && $(MAKE) MULTIFLAGS=-mown-gp all-multilibs


libg.a: $(OBJS) $(GOBJS)
	rm -f libg.a
	$(AR) cur libg.a $(OBJS) $(GOBJS)
	$(RANLIB) libg.a

# Yes, this library really is empty.  But we need it to exist to keep the
# linker happy if people link with m68k-palmos-g++.
libstdc++.a:
	$(AR) cur libstdc++.a
	$(RANLIB) libstdc++.a

libc.sa: libc.a
	rm -f libc.sa
	$(EXPORTLIST) libc.a > libc.exp
	$(STUBGEN) "C Library" Libc libcstub.c Libc.S < libc.exp
	ln -sf ../$(LIBGLIBDIR)/scrt0.o scrt0.o
	$(CC) -shared -static Libc.S ./libc.a -o Libc
	$(OBJRES) -l Libc
	$(BUILDPRC) -l Libc.prc "C Library" Libc *.Libc.grc
	$(CC) $(CFLAGS) -c libcstub.c
	$(AR) cur libc.sa libcstub.o
	$(RANLIB) libc.sa

libg.sa: libc.sa
	rm -f libg.sa
	ln -s libc.sa libg.sa

libgr.sa: libg.a
	rm -f libg.sa
	$(EXPORTLIST) libg.a > libg.exp
	$(STUBGEN) "Debug C Lib" Libg libgstub.c Libg.S < libg.exp
	ln -sf ../$(LIBGLIBDIR)/scrt0.o scrt0.o
	$(CC) -shared -static Libg.S ./libg.a -o Libg
	$(OBJRES) -l Libg
	$(BUILDPRC) -l Libg.prc "Debug C Lib" Libg *.Libg.grc
	$(CC) $(CFLAGS) -c libgstub.c
	$(AR) cur libg.sa libgstub.o
	$(RANLIB) libg.sa

.S.o:
	$(CC) $(TARGETFLAGS) $(SDKFLAGS) $(DEFINES) -c $<

clean:
	-rm -f *.[oa] Libc* libcstub* *.grc *.exp *.sa Libg* libgstub*

distclean: clean
	-rm Makefile

#div.o ldiv.o: division.c
#	$(CC) $(CFLAGS) -c -o $@ -DL`basename $@ .o` $<

malloc.o free.o calloc.o realloc.o: malloc.c include/stdlib.h ../include/NewTypes.h
	$(CC) $(CFLAGS) -c -o $@ -DL`basename $@ .o` $(srcdir)/malloc.c

#rand.o srand.o: random.c
#	$(CC) $(CFLAGS) -c -o $@ -DL`basename $@ .o` $<
#
#bmemcmp.o memcpy.o bcopy.o memset.o bzero.o: memory.S
#	$(CC) $(ASFLAGS) -c -o $@ -DL`basename $@ .o` $<
#
#strtol.o strtoul.o atoil.o: strtonum.S
#	$(CC) $(ASFLAGS) -c -o $@ -DL`basename $@ .o` $<

atexit.o: atexit.c include/stdlib.h ../include/NewTypes.h

conio.o: conio.c ../include/NewTypes.h
