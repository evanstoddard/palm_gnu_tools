# Makefile for prc-tools.
#
# Copyright (c) 1998, 1999 by John Marshall.
# <jmarshall@acm.org>
#
# This is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

srcdir = @srcdir@
VPATH = @srcdir@

CC = @CC@
CFLAGS = @CFLAGS@
CXX = @CXX@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@

prefix = @prefix@
exec_prefix = @exec_prefix@
target = @target@
target_alias = @target_alias@
palmdev_prefix = @sharedstatedir@
exeext = @EXEEXT@

INSTALL = @INSTALL@
RANLIB = @RANLIB@
LEX = @LEX@
YACC = @YACC@

# Eventually write configury goop to select this if needed
# (Is this *really* what you have to do to get one library statically linked?)
CXXLIBS = -nodefaultlibs -Wl,-Bstatic -lstdc++ -Wl,-Bdynamic -lm -lgcc -lc -lgcc

BINUTILS_INCDIRS = -I$(srcdir)/../binutils/include -I../binutils/bfd
BINUTILS_LIBDIRS = -L../binutils/bfd -L../binutils/libiberty

EXTRA_CFLAGS = \
  -DTARGET=\"$(target)\" \
  -DTARGET_ALIAS=\"$(target_alias)\" \
  -DEXEC_PREFIX=\"$(exec_prefix)\" \
  -DPALMDEV_PREFIX=\"$(palmdev_prefix)\" \
  -DEXEEXT=\"$(exeext)\"

PFD = libpfd.a

GENERIC_PROGS = build-prc$(exeext)

PREFIXED_PROGS = obj-res$(exeext) multigen$(exeext) stubgen$(exeext) \
		 sdkfind$(exeext)

INSTALL_FILES = $(GENERIC_PROGS) $(PREFIXED_PROGS)

all: $(INSTALL_FILES)

install: $(INSTALL_FILES)
	$(INSTALL) -d $(exec_prefix)/bin
	for f in $(GENERIC_PROGS); do \
	  echo $${f}; \
	  $(INSTALL) $${f} $(exec_prefix)/bin/$${f}; \
	done
	for f in $(PREFIXED_PROGS); do \
	  echo $${f}; \
	  $(INSTALL) $${f} $(exec_prefix)/bin/$(target_alias)-$${f}; \
	done
	# These ones shouldn't have been installed under the unprefixed
	# names, but they were for a while.  We'll keep them a while longer
	# for compatibility.
	for f in obj-res$(exeext) multigen$(exeext) stubgen$(exeext); do \
	  rm -f $(exec_prefix)/bin/$${f}; \
	  (  (cd $(exec_prefix)/bin; ln $(target_alias)-$${f} $${f}) \
	  || (cd $(exec_prefix)/bin; ln -s $(target_alias)-$${f} $${f}) \
	  || $(INSTALL) $${f} $(exec_prefix)/bin/$${f}) >/dev/null 2>&1; \
	done

info:

install-info:

.SUFFIXES: .cpp

.c.o:
	$(CC) $(CFLAGS) $(EXTRA_CFLAGS) $(BINUTILS_INCDIRS) -I. -o $@ -c $<
# -I. is for def.tab.h when compiling def.yy.c below

.cpp.o:
	$(CXX) $(CXXFLAGS) $(BINUTILS_INCDIRS) -o $@ -c $<

obj-res$(exeext): obj-res.o binres.o utils.o $(PFD)
	$(CXX) $(LDFLAGS) -o $@ $^ \
	$(BINUTILS_LIBDIRS) -lbfd -liberty -L. -lpfd $(CXXLIBS)

build-prc$(exeext): build-prc.o binres.o utils.o def.yy.o def.tab.o $(PFD)
	$(CXX) $(LDFLAGS) -o $@ $^ \
	$(BINUTILS_LIBDIRS) -lbfd -liberty -L. -lpfd $(CXXLIBS)

multigen$(exeext): multigen.o utils.o def.yy.o def.tab.o $(PFD)
	$(CC) $(LDFLAGS) -o $@ $^ $(BINUTILS_LIBDIRS) -liberty -L. -lpfd

stubgen$(exeext): stubgen.o utils.o def.yy.o def.tab.o $(PFD)
	$(CC) $(LDFLAGS) -o $@ $^ $(BINUTILS_LIBDIRS) -liberty -L. -lpfd

sdkfind_objs = sdkfind.o utils.o
sdkfind$(exeext): $(sdkfind_objs)
	$(CC) $(LDFLAGS) -o sdkfind$(exeext) $(sdkfind_objs) \
	$(BINUTILS_LIBDIRS) -liberty

build-prc.o: build-prc.cpp utils.h def.h binres.hpp \
	     pfd.hpp pfdheader.h pfdio.hpp
obj-res.o: obj-res.cpp binres.hpp pfd.hpp pfdheader.h utils.h
multigen.o: multigen.c multicode-s.str multicode-ld.str utils.h def.h
stubgen.o: stubgen.c glib-jumps-s.str glib-stubs-c.str utils.h def.h
sdkfind.o: sdkfind.c utils.h
binres.o: binres.cpp binres.hpp pfd.hpp pfdheader.h pfdio.hpp utils.h
utils.o: utils.c utils.h

def.yy.o: def.yy.c def.tab.h utils.h pfdheader.h
def.tab.o: def.tab.c config.h utils.h def.h pfdheader.h
def.tab.h: def.tab.c

def.yy.c: def.l def.tab.h utils.h pfdheader.h
	$(LEX) -is $(srcdir)/def.l \
	  && mv lex.yy.c def.yy.c

def.tab.c: def.y config.h utils.h def.h pfdheader.h
	$(YACC) -dv $(srcdir)/def.y \
	  && mv y.tab.c def.tab.c && mv y.tab.h def.tab.h \
	  && mv y.output def.output


CODIFY = sed -f $(srcdir)/templates/codify.sed

glib-jumps-s.str: templates/glib-jumps.s templates/codify.sed
	$(CODIFY) $(srcdir)/templates/glib-jumps.s > glib-jumps-s.str

glib-stubs-c.str: templates/glib-stubs.c templates/codify.sed
	$(CODIFY) $(srcdir)/templates/glib-stubs.c > glib-stubs-c.str

multicode-s.str: templates/multicode.s templates/codify.sed
	$(CODIFY) $(srcdir)/templates/multicode.s > multicode-s.str

multicode-ld.str: templates/multicode.ld templates/codify.sed
	$(CODIFY) $(srcdir)/templates/multicode.ld > multicode-ld.str


# This PFD library ought eventually to be separated off

PFD_OBJS = pfd.o pfdheader.o pfdtime.o

pfd.o: pfd.cpp pfd.hpp pfdio.hpp pfdheader.h
pfdheader.o: pfdheader.c pfdheader.h
pfdtime.o: pfdtime.c pfdheader.h

libpfd.a: $(PFD_OBJS)
	ar cr $@ $(PFD_OBJS)
	$(RANLIB) $@


clean:
	-rm -f *.o *.str def.*.* def.output

distclean: clean
	-rm -f $(INSTALL_FILES) libpfd.a Makefile
